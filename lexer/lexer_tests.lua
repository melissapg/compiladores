lu = require("luaunit")
lexer = require("lexer")

function get_tag(table) return table.tag end
function get_value(table) return table.value end


function testOperadoresPontuacoesSimples()
    lexer.init_lexer(',;:(){}+*/^%#&|')
    lu.assertEquals(get_tag(lexer.get_next_token()), ',')
    lu.assertEquals(get_tag(lexer.get_next_token()), ';')
    lu.assertEquals(get_tag(lexer.get_next_token()), ':')
    lu.assertEquals(get_tag(lexer.get_next_token()), '(')
    lu.assertEquals(get_tag(lexer.get_next_token()), ')')
    lu.assertEquals(get_tag(lexer.get_next_token()), '{')
    lu.assertEquals(get_tag(lexer.get_next_token()), '}')
    lu.assertEquals(get_tag(lexer.get_next_token()), '+')
    lu.assertEquals(get_tag(lexer.get_next_token()), '*')
    lu.assertEquals(get_tag(lexer.get_next_token()), '/')
    lu.assertEquals(get_tag(lexer.get_next_token()), '^')
    lu.assertEquals(get_tag(lexer.get_next_token()), '%')
    lu.assertEquals(get_tag(lexer.get_next_token()), '#')
    lu.assertEquals(get_tag(lexer.get_next_token()), '&')
    lu.assertEquals(get_tag(lexer.get_next_token()), '|')
end

function testOperadorIgual()
    lexer.init_lexer('= ==')
    lu.assertEquals(get_tag(lexer.get_next_token()), '=')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '==')
    lexer.init_lexer('=====')
    lu.assertEquals(get_tag(lexer.get_next_token()), '==')
    lu.assertEquals(get_tag(lexer.get_next_token()), '==')
    lu.assertEquals(get_tag(lexer.get_next_token()), '=')
end

function testOperadorPonto()
    lexer.init_lexer('. .. ...')
    lu.assertEquals(get_tag(lexer.get_next_token()), '.')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '..')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '...')
    lexer.init_lexer('......')
    lu.assertEquals(get_tag(lexer.get_next_token()), '...')
    lu.assertEquals(get_tag(lexer.get_next_token()), '...')
end

function testOperadorTil()
    lexer.init_lexer('~ ~=')
    lu.assertEquals(get_tag(lexer.get_next_token()), '~')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '~=')
    lexer.init_lexer('~~=')
    lu.assertEquals(get_tag(lexer.get_next_token()), '~')
    lu.assertEquals(get_tag(lexer.get_next_token()), '~=')
end

function testOperadorMaior()
    lexer.init_lexer('> >= >>')
    lu.assertEquals(get_tag(lexer.get_next_token()), '>')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '>=')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '>>')
    lexer.init_lexer('>>=>>')
    lu.assertEquals(get_tag(lexer.get_next_token()), '>>')
    lu.assertEquals(get_tag(lexer.get_next_token()), '=')
    lu.assertEquals(get_tag(lexer.get_next_token()), '>>')
end

function testOperadorMenor()
    lexer.init_lexer('< <= <<')
    lu.assertEquals(get_tag(lexer.get_next_token()), '<')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '<=')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '<<')
    lexer.init_lexer('<<=<<')
    lu.assertEquals(get_tag(lexer.get_next_token()), '<<')
    lu.assertEquals(get_tag(lexer.get_next_token()), '=')
    lu.assertEquals(get_tag(lexer.get_next_token()), '<<')
end

function testNumerosInteiros()
    lexer.init_lexer('1 23456 -10')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), '-')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lexer.init_lexer('1 23456 3')
    lu.assertEquals(get_value(lexer.get_next_token()), 1)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 23456)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 3)
end

function testNumerosDecimais()
    lexer.init_lexer('1.10 1. 3.1415e01 0.0 1.6e+12 .0')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lexer.init_lexer('1.10 1. 3.1415e01 21e3 0.0 1.6e+12 .3')
    lu.assertEquals(get_value(lexer.get_next_token()), 1.10)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 1.0)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 31.415)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 21000)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 0.0)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 1600000000000)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 0.3)
end

function testNumerosHexadecimais()
    lexer.init_lexer('0xC2AFE123 0X1f')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NUMERO')
    lexer.init_lexer('0xC2AFE123 0x1f')
    lu.assertEquals(get_value(lexer.get_next_token()), 3266306339)
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), 31)
end

function testVariaveis()
    lexer.init_lexer('a z A Z _ ABC abc A_A A1 A_1 _1 _a1Ab2_')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NOME')
    lexer.init_lexer('azAZ_ABCabcA_AA1A_1_1_a1Ab2_')
    lu.assertEquals(get_value(lexer.get_next_token()), 'azAZ_ABCabcA_AA1A_1_1_a1Ab2_')
end

function testKeywords()
    lexer.init_lexer([[true false nil local while for do end in if
    then else elseif function return break repeat until not and or]])
    lu.assertEquals(get_tag(lexer.get_next_token()), 'true')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'false')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'nil')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'local')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'while')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'for')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'do')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'end')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'in')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'if')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'NEWLINE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'then')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'else')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'elseif')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'function')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'return')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'break')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'repeat')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'until')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'not')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'and')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'or')
end

function testStringSimples()
    lexer.init_lexer("'botafogo' '\"botafogo'")
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lexer.init_lexer("'botafogo' '\"botafogo'")
    lu.assertEquals(get_value(lexer.get_next_token()), 'botafogo')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), '"botafogo')
end

function testStringDuplas()
    lexer.init_lexer('"botafogo" "\'botafogo"')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lexer.init_lexer('"botafogo" "\'botafogo"')
    lu.assertEquals(get_value(lexer.get_next_token()), 'botafogo')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_value(lexer.get_next_token()), "'botafogo")
end

function testColchetes()
    lexer.init_lexer('[] [[]] [=[]=]')
    lu.assertEquals(get_tag(lexer.get_next_token()), '[')
    lu.assertEquals(get_tag(lexer.get_next_token()), ']')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lexer.init_lexer('[][[]][=[]=]')
    lu.assertEquals(get_tag(lexer.get_next_token()), '[')
    lu.assertEquals(get_tag(lexer.get_next_token()), ']')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
end

function testStringBloco()
    lexer.init_lexer('[[botafogo]]')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lexer.init_lexer('[[botafogo]]')
    lu.assertEquals(get_value(lexer.get_next_token()), 'botafogo')
end

function testStringBlocoGrande()
    lexer.init_lexer('[=[botafogo]=]')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'STRING')
    lexer.init_lexer('[=[botafogo]=]')
    lu.assertEquals(get_value(lexer.get_next_token()), 'botafogo')
end

function testComentarioSimples()
    lexer.init_lexer('- -- botafogo')
    lu.assertEquals(get_tag(lexer.get_next_token()), '-')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'SPACE')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'COMENTARIO')
    lexer.init_lexer('--- botafogo')
    lu.assertEquals(get_tag(lexer.get_next_token()), 'COMENTARIO')
end

lu.LuaUnit.run()